<%- partial('_partials/plugins/nprogress.ejs') %>
<%- js_ex(theme.static_prefix.jquery, 'jquery.min.js') %>
<%- js_ex(theme.static_prefix.bootstrap, 'js/bootstrap.min.js') %>
<%- js_ex(theme.static_prefix.internal_js, 'events.js') %>
<%- js_ex(theme.static_prefix.internal_js, 'plugins.js') %>

<%- partial('_partials/plugins/typed.ejs') %>

<% if (theme.lazyload.enable){ %>
  <% if (theme.lazyload.onlypost) { %>
    <% if (is_post() || is_page()) { %>
      <%- js_ex(theme.static_prefix.internal_js, 'img-lazyload.js') %>
    <% } %>
  <% } else { %>
    <%- js_ex(theme.static_prefix.internal_js, 'img-lazyload.js') %>
  <% } %>
<% } %>

<% var script_snippets = deduplicate(page.script_snippets) %>
<% for (var idx = 0; idx < script_snippets.length; idx++) { %>
  <%- script_snippets[idx] %>
<% } %>
<% page.script_snippets = [] %>

<% if (theme.custom_js) { %>
  <%- js(theme.custom_js) %>
<% } %>

<% 
  var danmakuEnabled = theme.danmaku && (theme.danmaku.enabled === true || theme.danmaku.enable === true);
  var danmakuPage = (theme.danmaku && theme.danmaku.page ? theme.danmaku.page : '/comments/').replace(/^\//, '');
  var currentPath = (page.path || '').replace(/index\.html$/, '');
  var shouldLoadDanmaku = danmakuEnabled && currentPath === danmakuPage;
%>
<% if (shouldLoadDanmaku) { %>
  <!-- 注入 danmakuConfig 配置到页面中（仅弹幕页加载） -->
  <script>
    const danmakuConfig = {
      page: '<%= theme.danmaku.page %>' || '/comments/',
      line: <%- theme.danmaku.line %> || 10,
      speed: <%- theme.danmaku.speed %> || 20,
      hover: <%= theme.danmaku.hover ? true : false %>,
      loop: <%= theme.danmaku.loop ? true : false %>
    };
  </script>
  <%- js_ex(theme.static_prefix.internal_js, 'comment.js') %>
  <%- js_ex(theme.static_prefix.internal_js, 'comments.js') %>
<% } %>

<% if (config.OhMyLive2d && config.OhMyLive2d.lazy) { %>
  <script>
    (function () {
      var cfg = <%- JSON.stringify(config.OhMyLive2d || {}) %>;
      function resolveParentElement(val) {
        if (!val) return document.body;
        if (typeof val === 'string') {
          if (val === 'document.body') return document.body;
          try {
            var el = document.querySelector(val);
            return el || document.body;
          } catch (_) { return document.body; }
        }
        return document.body;
      }
      function shouldLoad() {
        var mobileDisplay = cfg.option && typeof cfg.option.mobileDisplay === 'boolean' ? cfg.option.mobileDisplay : false;
        var isNarrow = window.matchMedia ? window.matchMedia('(max-width: 767px)').matches : (window.innerWidth < 768);
        if (!mobileDisplay && isNarrow) {
          console && console.log && console.log('[OhMyLive2D] skip by width: mobileDisplay=false', { width: window.innerWidth });
          return false;
        }
        return true;
      }
      function loadOML() {
        if (!shouldLoad()) return;
        console && console.log && console.log('[OhMyLive2D] start loading');
        var s = document.createElement('script');
        var primary = cfg.CDN || 'https://registry.npmmirror.com/oh-my-live2d/latest/files/index.min.js';
        var fallback = 'https://cdn.jsdelivr.net/npm/oh-my-live2d@latest/dist/index.min.js';
        s.src = primary;
        s.defer = true;
        s.onload = function () {
          // oh-my-live2d exposes either `OML2D.loadOml2d` (modern) or `OhMyLive2D.load` (legacy/packaged)
          var api = null;
          var apiType = '';
          if (window.OML2D && typeof window.OML2D.loadOml2d === 'function') { api = window.OML2D.loadOml2d; apiType = 'OML2D'; }
          else if (window.OhMyLive2D && typeof window.OhMyLive2D.load === 'function') { api = window.OhMyLive2D.load; apiType = 'OhMyLive2D'; }
          if (!api) {
            console && console.warn && console.warn('[OhMyLive2D] global API not found');
            return;
          }
          var opt = cfg.option || {};
          var options = {
            mobileDisplay: !!opt.mobileDisplay,
            models: Array.isArray(opt.models) ? opt.models : [],
            parentElement: resolveParentElement(opt.parentElement),
            primaryColor: opt.primaryColor,
            sayHello: !!opt.sayHello,
            libraryUrls: opt.libraryUrls || undefined
          };
          try {
            var oml2d = api(options);
            if (oml2d && typeof oml2d.stageSlideIn === 'function') {
              try { oml2d.stageSlideIn(); } catch(_) {}
            }
            var hookStr = <%- JSON.stringify(config.OhMyLive2d.then || '') %>;
            if (hookStr) {
              try {
                var hook = eval(hookStr);
                if (typeof hook === 'function') hook(oml2d);
                else try { eval(hookStr); } catch(_) {}
              } catch (e) { /* ignore hook error */ }
            }
            console && console.log && console.log('[OhMyLive2D] loaded via', apiType);
          } catch (e) { console && console.error && console.error('[OhMyLive2D] load error', e); }
        };
        s.onerror = function () {
          console && console.warn && console.warn('[OhMyLive2D] primary CDN failed, retry fallback');
          var f = document.createElement('script');
          f.src = fallback;
          f.defer = true;
          f.onload = s.onload;
          f.onerror = function(){ console && console.error && console.error('[OhMyLive2D] fallback CDN failed'); };
          document.head.appendChild(f);
        };
        document.head.appendChild(s);
      }
      function start() {
        // 尽早加载，同时再设一个兜底定时器，避免某些环境下 rIC 不触发
        loadOML();
        window.setTimeout(function(){ try { loadOML(); } catch(_){} }, 2000);
      }
      if (document.readyState === 'complete') start();
      else {
        window.addEventListener('load', start, { once: true });
        document.addEventListener('DOMContentLoaded', start, { once: true });
      }
    })();
  </script>
<% } %>

<!-- 主题的启动项，将它保持在最底部 -->
<!-- the boot of the theme, keep it at the bottom -->
<%- js_ex(theme.static_prefix.internal_js, 'boot.js') %>
